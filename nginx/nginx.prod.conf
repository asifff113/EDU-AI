worker_processes auto;
events { 
  worker_connections 2048; 
  use epoll;
  multi_accept on;
}

http {
  include       mime.types;
  default_type  application/octet-stream;
  
  # Performance optimizations
  sendfile        on;
  tcp_nopush      on;
  tcp_nodelay     on;
  keepalive_timeout  65;
  keepalive_requests 100;
  
  # Gzip compression
  gzip on;
  gzip_vary on;
  gzip_min_length 1000;
  gzip_proxied any;
  gzip_comp_level 6;
  gzip_types
    text/plain
    text/css
    text/xml
    text/javascript
    application/json
    application/javascript
    application/xml+rss
    application/atom+xml
    image/svg+xml;
  
  # Rate limiting
  limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
  limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
  limit_req_zone $binary_remote_addr zone=global:10m rate=100r/s;
  
  # Security headers
  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header X-XSS-Protection "1; mode=block" always;
  add_header Referrer-Policy "no-referrer-when-downgrade" always;
  add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline' 'unsafe-eval'" always;
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

  # Redirect HTTP to HTTPS
  server {
    listen 80;
    server_name eduai.com www.eduai.com;
    return 301 https://$server_name$request_uri;
  }

  server {
    listen 443 ssl http2;
    server_name eduai.com www.eduai.com;

    # SSL Configuration (replace with your actual certificates)
    ssl_certificate /etc/nginx/ssl/eduai.com.crt;
    ssl_certificate_key /etc/nginx/ssl/eduai.com.key;
    
    # SSL Security
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    client_max_body_size 50m;
    client_body_timeout 60s;
    client_header_timeout 60s;

    # Global rate limiting
    limit_req zone=global burst=200 nodelay;

    # API routes with rate limiting
    location /api/ {
      limit_req zone=api burst=20 nodelay;
      
      proxy_pass http://api:4000/;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_cache_bypass $http_upgrade;
      proxy_read_timeout 300s;
      proxy_connect_timeout 75s;
    }

    # Authentication endpoints with stricter rate limiting
    location /api/auth/login {
      limit_req zone=login burst=3 nodelay;
      
      proxy_pass http://api:4000/auth/login;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Serve uploaded assets via API container static route
    location /uploads/ {
      proxy_pass http://api:4000/uploads/;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_cache_bypass $http_upgrade;
      
      # Cache static assets
      expires 1y;
      add_header Cache-Control "public, immutable";
    }

    # Socket.IO websockets
    location /socket.io/ {
      proxy_pass http://api:4000/socket.io/;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_cache_bypass $http_upgrade;
      proxy_read_timeout 300s;
    }

    # Static files from Next.js
    location /_next/static/ {
      proxy_pass http://web:3000/_next/static/;
      expires 1y;
      add_header Cache-Control "public, immutable";
    }

    # Next.js assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
      proxy_pass http://web:3000;
      expires 1y;
      add_header Cache-Control "public";
    }

    # Health check endpoint
    location /health {
      access_log off;
      return 200 "healthy\n";
      add_header Content-Type text/plain;
    }

    # Robots.txt
    location /robots.txt {
      proxy_pass http://web:3000/robots.txt;
      expires 1d;
    }

    # Sitemap
    location /sitemap.xml {
      proxy_pass http://web:3000/sitemap.xml;
      expires 1d;
    }

    # Main Next.js application
    location / {
      proxy_pass http://web:3000/;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_cache_bypass $http_upgrade;
      proxy_read_timeout 300s;
    }
  }
}
